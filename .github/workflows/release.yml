name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Run tests
        run: pnpm test

      - name: Check for changes to release
        id: check_changes
        run: |
          git fetch --prune --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            # If no tags exist, check all commits
            COMMITS_TO_CHECK="HEAD"
          else
            COMMITS_TO_CHECK="$LATEST_TAG..HEAD"
          fi

          # Check for conventional commits with a more reliable pattern
          if git log --oneline --pretty=format:"%s"  $COMMITS_TO_CHECK | grep -q -E '^(feat|fix|perf|revert|docs|style|chore|refactor|test|build|ci)(\([a-z0-9-]+\))?:.*$'; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        if: steps.check_changes.outputs.has_changes == 'true'
        id: create_release
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          pnpm run release
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          echo "tag_name=v$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Push changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "chore: prepare release"
          fi
          git push --follow-tags origin HEAD:main

      - name: Create npm package
        if: steps.check_changes.outputs.has_changes == 'true'
        run: pnpm pack

      - name: Upload npm package
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: clifty-*.tgz
          retention-days: 1

      - name: Create GitHub Release
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.create_release.outputs.version }}
          tag_name: v${{ steps.create_release.outputs.version }}
          body: ${{ steps.create_release.outputs.changelog }}
          draft: false
          prerelease: false
          files: |
            clifty-${{ steps.create_release.outputs.version }}.tgz
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Publish to NPM
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
          pnpm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
